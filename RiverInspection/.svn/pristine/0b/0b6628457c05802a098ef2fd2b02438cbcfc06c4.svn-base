package com.vk.service.impl;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.vk.mapper.InspectionFileMapper;
import com.vk.mapper.InspectionQuestionMapper;
import com.vk.mapper.InspectionRecordMapper;
import com.vk.mapper.RiverQuestionMapper;
import com.vk.model.InspectionFile;
import com.vk.model.InspectionQuestion;
import com.vk.model.InspectionRecord;
import com.vk.model.RiverQuestion;
import com.vk.request.DemoResult;
import com.vk.request.InspectionAnswerQuestions;
import com.vk.response.Result;
import com.vk.response.ResultData;
import com.vk.security.UserDetail;
import com.vk.service.InspectionRecordService;
import org.apache.ibatis.annotations.ResultType;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * Created by weijin on 2018/6/25.
 */
@Service
public class InspectionRecordServiceImpl implements InspectionRecordService {
    @Resource
    private InspectionRecordMapper inspectionRecordMapper;
    @Resource
    private InspectionQuestionMapper inspectionQuestionMapper;
    @Resource
    private RiverQuestionMapper riverQuestionMapper;
    @Resource
    private InspectionFileMapper inspectionFileMapper;


    @Override
    public Result createRecord(Integer areaId,String title, String riverName, Integer riverId, String riverNo, String towns, String lat, String lng, String address, Integer firstAssess, String context, String[] photoFiles, Integer score, Integer rectification,List<DemoResult> detail) {
        Result result = new Result(ResultData.FAILED,null,"插入失败");
        UserDetail userDetail = (UserDetail) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        try{
            InspectionRecord inspectionRecord = new InspectionRecord();

            inspectionRecord.setTitle(title);
            inspectionRecord.setRiverName(riverName);
            inspectionRecord.setRiverId(riverId);
            inspectionRecord.setRiverNo(riverNo);
            inspectionRecord.setTowns(towns);
            inspectionRecord.setLat(lat);
            inspectionRecord.setLng(lng);
            inspectionRecord.setAddress(address);
            inspectionRecord.setFirstAssess(firstAssess);
            inspectionRecord.setContext(context);
            inspectionRecord.setScore(score);
            inspectionRecord.setRectification(rectification);
            inspectionRecord.setAreaId(areaId);
            inspectionRecord.setCreatorId(userDetail.getId());
            inspectionRecord.setCreator(userDetail.getRealName());
            inspectionRecord.setCreateTime(new Date());

            inspectionRecord.setStatus("0");


            inspectionRecordMapper.insertSelective(inspectionRecord);
            if(photoFiles.length>0){
                for(int i=0;i<photoFiles.length;i++){
                    InspectionFile file = new InspectionFile();
                    file.setType(0);
                    file.setCreateTime(new Date());
                    file.setRecordId(inspectionRecord.getId());
                    file.setFileName(photoFiles[i]);
                    inspectionFileMapper.insertSelective(file);
                }
            }
            if(detail != null){
                for(DemoResult demoResult:detail){

                    if(demoResult.getDetail()!= null){
                        for(Map<String,Object> map:demoResult.getDetail()){
                            InspectionQuestion question = new InspectionQuestion();
                            question.setRecordId(inspectionRecord.getId());
                            question.setStatus(0);
                            question.setFirstQuestionId(demoResult.getId());
                            question.setTwoQuestionId(Integer.valueOf(map.get("ids").toString()));
                            String scores =map.get("score").toString();
                            question.setScore(Integer.valueOf(map.get("score").toString()));
                            inspectionQuestionMapper.insertSelective(question);
                        }
                    }

                    if(demoResult.getDescription() != null){
                        InspectionQuestion question = new InspectionQuestion();
                        question.setRecordId(inspectionRecord.getId());
                        question.setStatus(1);
                        question.setFirstQuestionId(demoResult.getId());
                        question.setText(demoResult.getDescription());
                        inspectionQuestionMapper.insertSelective(question);
                    }
                }
            }

            result.setCode(Result.SUCCESS);
            result.setMsg("添加成功");
        }catch (Exception e){
             e.printStackTrace();
        }
        return result;
    }

    @Override
    public ResultData getRecord(String status,Integer pageNum,Integer pageSize,Integer areaId) {
        ResultData resultData = new ResultData(ResultData.FAILED,null,"查询失败");
        try{
            InspectionRecord record = new InspectionRecord();

            record.setStatus(status);
            record.setAreaId(areaId);

            Page page = PageHelper.startPage(pageNum,pageSize,true);
            List<InspectionRecord> list = inspectionRecordMapper.getRecord(record);
            Long total = page.getTotal();
            Integer pages = page.getPages();
            ResultData dataResult = new ResultData(ResultData.SUCCESS,pageNum,total,pages,list,"查询成功");
            return dataResult;
        }catch (Exception e){
            e.printStackTrace();
        }
        return resultData;
    }

    @Override
    public ResultData getRecordById(Integer recordId) {
        ResultData resultData = new ResultData(ResultData.FAILED,null,"查询失败");
        try{
            InspectionRecord record = new InspectionRecord();
            record.setId(recordId);

            InspectionRecord list = inspectionRecordMapper.getRecordById(record);

            InspectionQuestion inspectionQuestion = new InspectionQuestion();
            inspectionQuestion.setStatus(0);
            inspectionQuestion.setRecordId(recordId);
            List<InspectionQuestion> inspectionQuestions= inspectionQuestionMapper.getQuestions(inspectionQuestion);//获得问题集合

            InspectionQuestion inspectionQuestion1 = new InspectionQuestion();
            inspectionQuestion1.setStatus(1);
            inspectionQuestion1.setRecordId(recordId);
            List<InspectionQuestion> text= inspectionQuestionMapper.getQuestions(inspectionQuestion1);//获得说明

//            List<Map<String,Object>> questionList = new ArrayList<Map<String,Object>>();

            List<RiverQuestion> riverQuestions = riverQuestionMapper.getRiverQuestion();//获得父类问题的种类
            for(RiverQuestion riverQuestion:riverQuestions){
                List<InspectionQuestion> questionList= new ArrayList<>();
                for(InspectionQuestion question:inspectionQuestions){
                    if(riverQuestion.getId().equals(question.getFirstQuestionId())){
                        questionList.add(question);
                    }
                }
                riverQuestion.setSecondQuestions(questionList);

                if(text != null){
                    for(InspectionQuestion questionText:text){
                        if(riverQuestion.getId().equals(questionText.getFirstQuestionId())){
                            riverQuestion.setText(questionText.getText());
                        }
                    }
                }
            }
            list.setRiverQuestions(riverQuestions);


            ResultData dataResult = new ResultData(ResultData.SUCCESS,null,null,null,list,"查询成功");
            return dataResult;
        }catch (Exception e){
            e.printStackTrace();
        }
        return resultData;
    }
}
